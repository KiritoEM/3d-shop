generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  config3D    Json     @default("{\"scale\": 2.4, \"position\": [0, 0, 0], \"rotation\": [0, 0, 0]}")
  price       Decimal
  modelPath   String
  groundColor String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  Int
  cuid        String   @default(cuid()) @unique
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  customisationConfigs Json @default("{}")

  @@map("product")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  products Product[]

  @@map("category")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?       
  password     String?       
  emailVerified DateTime?    
  image        String?       
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  accounts     Account[]     
  transactions Transaction[]

  @@map("user")
}

model Account {
  userId            String  
  type              String  
  provider          String  
  providerAccountId String  
  refresh_token     String? @db.Text 
  access_token      String? @db.Text 
  expires_at        Int?             
  token_type        String?          
  scope             String?          
  id_token          String? @db.Text 
  session_state     String?          

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) 
  @@map("account")
}

model Session {
  id String @id @default(cuid())
  token String   @unique 
  expires      DateTime 
  isActive     Boolean  @default(true)
  userAgent    String?

  //timespan
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String  
  token      String  
  expires    DateTime 

  @@id([identifier, token]) 
  @@map("verification_token")
}

model Transaction {
  id                    Int               @id @default(autoincrement())
  createdAt             DateTime          @default(now())
  stripePaymentIntentId String?            @unique
  stripeChargeId        String?            @unique
  amount                Int              
  currency              String            @default("eur")
  status                TransactionStatus
  updatedAt             DateTime          @updatedAt
  customerEmail         String
  customerName          String
  userId                String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transaction") 
}

model AdminInfo {
  id Int  @id @default(autoincrement())
  username String @unique
  password String 
  role AdminRole @default(SUPERADMIN)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, password])
  @@map("admin_info")
}

enum TransactionStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum AdminRole {
  SUPERADMIN
  ADMIN
}